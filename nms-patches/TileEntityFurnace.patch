--- a/net/minecraft/server/TileEntityFurnace.java
+++ b/net/minecraft/server/TileEntityFurnace.java
@@ -1,6 +1,15 @@
 package net.minecraft.server;
 
 import java.util.Iterator;
+// CraftBukkit start
+import java.util.List;
+
+import org.bukkit.craftbukkit.inventory.CraftItemStack;
+import org.bukkit.entity.HumanEntity;
+import org.bukkit.event.inventory.FurnaceBurnEvent;
+import org.bukkit.event.inventory.FurnaceSmeltEvent;
+import org.bukkit.craftbukkit.entity.CraftHumanEntity;
+// CraftBukkit end
 
 public class TileEntityFurnace extends TileEntityContainer implements ITickable, IWorldInventory {
 
@@ -14,6 +23,32 @@
     private int cookTimeTotal;
     private String m;
 
+    // CraftBukkit start - add fields and methods
+    private int lastTick = MinecraftServer.currentTick;
+    private int maxStack = MAX_STACK;
+    public List<HumanEntity> transaction = new java.util.ArrayList<HumanEntity>();
+
+    public List<ItemStack> getContents() {
+        return this.items;
+    }
+
+    public void onOpen(CraftHumanEntity who) {
+        transaction.add(who);
+    }
+
+    public void onClose(CraftHumanEntity who) {
+        transaction.remove(who);
+    }
+
+    public List<HumanEntity> getViewers() {
+        return transaction;
+    }
+
+    public void setMaxStackSize(int size) {
+        maxStack = size;
+    }
+    // CraftBukkit end
+
     public TileEntityFurnace() {
         this.items = NonNullList.a(3, ItemStack.a);
     }
@@ -119,11 +154,29 @@
     }
 
     public void e() {
-        boolean flag = this.isBurning();
+        boolean flag = (this.getBlock() == Blocks.LIT_FURNACE); // CraftBukkit - SPIGOT-844 - Check if furnace block is lit using the block instead of burn time
         boolean flag1 = false;
 
+        // CraftBukkit start - Use wall time instead of ticks for cooking
+        int elapsedTicks = MinecraftServer.currentTick - this.lastTick;
+        this.lastTick = MinecraftServer.currentTick;
+
+        // CraftBukkit - moved from below - edited for wall time
+        if (this.isBurning() && this.canBurn()) {
+            this.cookTime += elapsedTicks;
+            if (this.cookTime >= this.cookTimeTotal) {
+                this.cookTime = 0;
+                this.cookTimeTotal = this.a((ItemStack) this.items.get(0));
+                this.burn();
+                flag1 = true;
+            }
+        } else {
+            this.cookTime = 0;
+        }
+        // CraftBukkit end
+
         if (this.isBurning()) {
-            --this.burnTime;
+            this.burnTime -= elapsedTicks; // CraftBukkit - use elapsedTicks in place of constant
         }
 
         if (!this.world.isClientSide) {
@@ -134,10 +187,21 @@
                     this.cookTime = MathHelper.clamp(this.cookTime - 2, 0, this.cookTimeTotal);
                 }
             } else {
-                if (!this.isBurning() && this.canBurn()) {
-                    this.burnTime = fuelTime(itemstack);
-                    this.ticksForCurrentFuel = this.burnTime;
-                    if (this.isBurning()) {
+                // CraftBukkit start - Handle multiple elapsed ticks
+                if (this.burnTime <= 0 && this.canBurn()) { // CraftBukkit - == to <=
+                    CraftItemStack fuel = CraftItemStack.asCraftMirror(itemstack);
+
+                    FurnaceBurnEvent furnaceBurnEvent = new FurnaceBurnEvent(this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), fuel, fuelTime(itemstack));
+                    this.world.getServer().getPluginManager().callEvent(furnaceBurnEvent);
+
+                    if (furnaceBurnEvent.isCancelled()) {
+                        return;
+                    }
+
+                    this.ticksForCurrentFuel = furnaceBurnEvent.getBurnTime();
+                    this.burnTime += this.ticksForCurrentFuel;
+                    if (this.burnTime > 0 && furnaceBurnEvent.isBurning()) {
+                        // CraftBukkit end
                         flag1 = true;
                         if (!itemstack.isEmpty()) {
                             Item item = itemstack.getItem();
@@ -152,6 +216,7 @@
                     }
                 }
 
+                /* CraftBukkit start - Moved up
                 if (this.isBurning() && this.canBurn()) {
                     ++this.cookTime;
                     if (this.cookTime == this.cookTimeTotal) {
@@ -163,11 +228,13 @@
                 } else {
                     this.cookTime = 0;
                 }
+                */
             }
 
             if (flag != this.isBurning()) {
                 flag1 = true;
                 BlockFurnace.a(this.isBurning(), this.world, this.position);
+                this.invalidateBlockCache(); // CraftBukkit - Invalidate tile entity's cached block type 
             }
         }
 
@@ -192,7 +259,8 @@
             } else {
                 ItemStack itemstack1 = (ItemStack) this.items.get(2);
 
-                return itemstack1.isEmpty() ? true : (!itemstack1.doMaterialsMatch(itemstack) ? false : (itemstack1.getCount() < this.getMaxStackSize() && itemstack1.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() < itemstack.getMaxStackSize()));
+                // CraftBukkit - consider resultant count instead of current count
+                return itemstack1.isEmpty() ? true : (!itemstack1.doMaterialsMatch(itemstack) ? false : (itemstack1.getCount() + itemstack.getCount() <= this.getMaxStackSize() && itemstack1.getCount() + itemstack.getCount() < itemstack1.getMaxStackSize() ? true : itemstack1.getCount() + itemstack.getCount() <= itemstack.getMaxStackSize()));
             }
         }
     }
@@ -203,11 +271,38 @@
             ItemStack itemstack1 = RecipesFurnace.getInstance().getResult(itemstack);
             ItemStack itemstack2 = (ItemStack) this.items.get(2);
 
+            // CraftBukkit start - fire FurnaceSmeltEvent
+            CraftItemStack source = CraftItemStack.asCraftMirror(itemstack);
+            org.bukkit.inventory.ItemStack result = CraftItemStack.asBukkitCopy(itemstack1);
+
+            FurnaceSmeltEvent furnaceSmeltEvent = new FurnaceSmeltEvent(this.world.getWorld().getBlockAt(position.getX(), position.getY(), position.getZ()), source, result);
+            this.world.getServer().getPluginManager().callEvent(furnaceSmeltEvent);
+
+            if (furnaceSmeltEvent.isCancelled()) {
+                return;
+            }
+
+            result = furnaceSmeltEvent.getResult();
+            itemstack1 = CraftItemStack.asNMSCopy(result);
+
+            if (!itemstack1.isEmpty()) {
+                if (itemstack2.isEmpty()) {
+                    this.items.set(2, itemstack1.cloneItemStack());
+                } else if (CraftItemStack.asCraftMirror(itemstack2).isSimilar(result)) {
+                    itemstack2.add(itemstack1.getCount());
+                } else {
+                    return;
+                }
+            }
+
+            /*
             if (itemstack2.isEmpty()) {
                 this.items.set(2, itemstack1.cloneItemStack());
             } else if (itemstack2.getItem() == itemstack1.getItem()) {
                 itemstack2.add(1);
             }
+            */
+            // CraftBukkit end
 
             if (itemstack.getItem() == Item.getItemOf(Blocks.SPONGE) && itemstack.getData() == 1 && !((ItemStack) this.items.get(1)).isEmpty() && ((ItemStack) this.items.get(1)).getItem() == Items.BUCKET) {
                 this.items.set(1, new ItemStack(Items.WATER_BUCKET));
