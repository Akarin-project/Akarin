--- a/net/minecraft/server/EntityLightning.java
+++ b/net/minecraft/server/EntityLightning.java
@@ -2,15 +2,19 @@
 
 import java.util.List;
 
+import org.bukkit.craftbukkit.event.CraftEventFactory; // CraftBukkit
+
 public class EntityLightning extends EntityWeather {
 
     private int lifeTicks;
     public long a;
     private int c;
     private final boolean d;
+    public boolean isEffect; // CraftBukkit
 
     public EntityLightning(World world, double d0, double d1, double d2, boolean flag) {
         super(world);
+        this.isEffect = flag; // CraftBukkit
         this.setPositionRotation(d0, d1, d2, 0.0F, 0.0F);
         this.lifeTicks = 2;
         this.a = this.random.nextLong();
@@ -20,14 +24,22 @@
 
         if (!flag && !world.isClientSide && world.getGameRules().getBoolean("doFireTick") && (world.getDifficulty() == EnumDifficulty.NORMAL || world.getDifficulty() == EnumDifficulty.HARD) && world.areChunksLoaded(blockposition, 10)) {
             if (world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition)) {
-                world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
+                // CraftBukkit start
+                if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
+                    world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
+                }
+                // CraftBukkit end
             }
 
             for (int i = 0; i < 4; ++i) {
                 BlockPosition blockposition1 = blockposition.a(this.random.nextInt(3) - 1, this.random.nextInt(3) - 1, this.random.nextInt(3) - 1);
 
                 if (world.getType(blockposition1).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(world, blockposition1)) {
-                    world.setTypeUpdate(blockposition1, Blocks.FIRE.getBlockData());
+                    // CraftBukkit start
+                    if (!CraftEventFactory.callBlockIgniteEvent(world, blockposition1.getX(), blockposition1.getY(), blockposition1.getZ(), this).isCancelled()) {
+                        world.setTypeUpdate(blockposition1, Blocks.FIRE.getBlockData());
+                    }
+                    // CraftBukkit end
                 }
             }
         }
@@ -41,7 +53,24 @@
     public void A_() {
         super.A_();
         if (this.lifeTicks == 2) {
-            this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dx, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
+            // CraftBukkit start - Use relative location for far away sounds
+            // this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dv, SoundCategory.WEATHER, 10000.0F, 0.8F + this.random.nextFloat() * 0.2F);
+            float pitch = 0.8F + this.random.nextFloat() * 0.2F;
+            int viewDistance = ((WorldServer) this.world).getServer().getViewDistance() * 16;
+            for (EntityPlayer player : (List<EntityPlayer>) (List) this.world.players) {
+                double deltaX = this.locX - player.locX;
+                double deltaZ = this.locZ - player.locZ;
+                double distanceSquared = deltaX * deltaX + deltaZ * deltaZ;
+                if (distanceSquared > viewDistance * viewDistance) {
+                    double deltaLength = Math.sqrt(distanceSquared);
+                    double relativeX = player.locX + (deltaX / deltaLength) * viewDistance;
+                    double relativeZ = player.locZ + (deltaZ / deltaLength) * viewDistance;
+                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dx, SoundCategory.WEATHER, relativeX, this.locY, relativeZ, 10000.0F, pitch));
+                } else {
+                    player.playerConnection.sendPacket(new PacketPlayOutNamedSoundEffect(SoundEffects.dx, SoundCategory.WEATHER, this.locX, this.locY, this.locZ, 10000.0F, pitch));
+                }
+            }
+            // CraftBukkit end
             this.world.a((EntityHuman) null, this.locX, this.locY, this.locZ, SoundEffects.dw, SoundCategory.WEATHER, 2.0F, 0.5F + this.random.nextFloat() * 0.2F);
         }
 
@@ -57,13 +86,17 @@
                     BlockPosition blockposition = new BlockPosition(this);
 
                     if (this.world.getGameRules().getBoolean("doFireTick") && this.world.areChunksLoaded(blockposition, 10) && this.world.getType(blockposition).getMaterial() == Material.AIR && Blocks.FIRE.canPlace(this.world, blockposition)) {
-                        this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
+                        // CraftBukkit start - add "!isEffect"
+                        if (!isEffect && !CraftEventFactory.callBlockIgniteEvent(world, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this).isCancelled()) {
+                            this.world.setTypeUpdate(blockposition, Blocks.FIRE.getBlockData());
+                        }
+                        // CraftBukkit end
                     }
                 }
             }
         }
 
-        if (this.lifeTicks >= 0) {
+        if (this.lifeTicks >= 0 && !this.isEffect) { // CraftBukkit - add !this.isEffect
             if (this.world.isClientSide) {
                 this.world.d(2);
             } else if (!this.d) {
