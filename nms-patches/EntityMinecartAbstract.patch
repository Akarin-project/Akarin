--- a/net/minecraft/server/EntityMinecartAbstract.java
+++ b/net/minecraft/server/EntityMinecartAbstract.java
@@ -6,6 +6,15 @@
 import java.util.Map;
 import javax.annotation.Nullable;
 
+// CraftBukkit start
+import org.bukkit.Location;
+import org.bukkit.entity.Vehicle;
+import org.bukkit.event.vehicle.VehicleDamageEvent;
+import org.bukkit.event.vehicle.VehicleDestroyEvent;
+import org.bukkit.event.vehicle.VehicleEntityCollisionEvent;
+import org.bukkit.util.Vector;
+// CraftBukkit end
+
 public abstract class EntityMinecartAbstract extends Entity implements INamableTileEntity {
 
     private static final DataWatcherObject<Integer> a = DataWatcher.a(EntityMinecartAbstract.class, DataWatcherRegistry.b);
@@ -23,6 +32,17 @@
     private double ay;
     private double az;
 
+    // CraftBukkit start
+    public boolean slowWhenEmpty = true;
+    private double derailedX = 0.5;
+    private double derailedY = 0.5;
+    private double derailedZ = 0.5;
+    private double flyingX = 0.95;
+    private double flyingY = 0.95;
+    private double flyingZ = 0.95;
+    public double maxSpeed = 0.4D;
+    // CraftBukkit end
+
     public EntityMinecartAbstract(World world) {
         super(world);
         this.i = true;
@@ -90,6 +110,8 @@
         this.lastX = d0;
         this.lastY = d1;
         this.lastZ = d2;
+
+        this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleCreateEvent((Vehicle) this.getBukkitEntity())); // CraftBukkit
     }
 
     public double ay() {
@@ -101,6 +123,19 @@
             if (this.isInvulnerable(damagesource)) {
                 return false;
             } else {
+                // CraftBukkit start - fire VehicleDamageEvent
+                Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+                org.bukkit.entity.Entity passenger = (damagesource.getEntity() == null) ? null : damagesource.getEntity().getBukkitEntity();
+
+                VehicleDamageEvent event = new VehicleDamageEvent(vehicle, passenger, f);
+                this.world.getServer().getPluginManager().callEvent(event);
+
+                if (event.isCancelled()) {
+                    return true;
+                }
+
+                f = (float) event.getDamage();
+                // CraftBukkit end
                 this.e(-this.u());
                 this.d(10);
                 this.ap();
@@ -108,6 +143,15 @@
                 boolean flag = damagesource.getEntity() instanceof EntityHuman && ((EntityHuman) damagesource.getEntity()).abilities.canInstantlyBuild;
 
                 if (flag || this.getDamage() > 40.0F) {
+                    // CraftBukkit start
+                    VehicleDestroyEvent destroyEvent = new VehicleDestroyEvent(vehicle, passenger);
+                    this.world.getServer().getPluginManager().callEvent(destroyEvent);
+
+                    if (destroyEvent.isCancelled()) {
+                        this.setDamage(40); // Maximize damage so this doesn't get triggered again right away
+                        return true;
+                    }
+                    // CraftBukkit end
                     this.az();
                     if (flag && !this.hasCustomName()) {
                         this.die();
@@ -150,6 +194,14 @@
     }
 
     public void m() {
+        // CraftBukkit start
+        double prevX = this.locX;
+        double prevY = this.locY;
+        double prevZ = this.locZ;
+        float prevYaw = this.yaw;
+        float prevPitch = this.pitch;
+        // CraftBukkit end
+
         if (this.getType() > 0) {
             this.d(this.getType() - 1);
         }
@@ -170,7 +222,7 @@
 
             i = this.V();
             if (this.al) {
-                if (minecraftserver.getAllowNether()) {
+                if (true || minecraftserver.getAllowNether()) { // CraftBukkit - multi-world should still allow teleport even if default vanilla nether disabled
                     if (!this.isPassenger() && this.am++ >= i) {
                         this.am = i;
                         this.portalCooldown = this.aE();
@@ -270,6 +322,18 @@
             }
 
             this.setYawPitch(this.yaw, this.pitch);
+            // CraftBukkit start
+            org.bukkit.World bworld = this.world.getWorld();
+            Location from = new Location(bworld, prevX, prevY, prevZ, prevYaw, prevPitch);
+            Location to = new Location(bworld, this.locX, this.locY, this.locZ, this.yaw, this.pitch);
+            Vehicle vehicle = (Vehicle) this.getBukkitEntity();
+
+            this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleUpdateEvent(vehicle));
+
+            if (!from.equals(to)) {
+                this.world.getServer().getPluginManager().callEvent(new org.bukkit.event.vehicle.VehicleMoveEvent(vehicle, from, to));
+            }
+            // CraftBukkit end
             if (this.v() == EntityMinecartAbstract.EnumMinecartType.RIDEABLE && this.motX * this.motX + this.motZ * this.motZ > 0.01D) {
                 List list = this.world.getEntities(this, this.getBoundingBox().grow(0.20000000298023224D, 0.0D, 0.20000000298023224D), IEntitySelector.a(this));
 
@@ -278,6 +342,14 @@
                         Entity entity = (Entity) list.get(l);
 
                         if (!(entity instanceof EntityHuman) && !(entity instanceof EntityIronGolem) && !(entity instanceof EntityMinecartAbstract) && !this.isVehicle() && !entity.isPassenger()) {
+                            // CraftBukkit start
+                            VehicleEntityCollisionEvent collisionEvent = new VehicleEntityCollisionEvent(vehicle, entity.getBukkitEntity());
+                            this.world.getServer().getPluginManager().callEvent(collisionEvent);
+
+                            if (collisionEvent.isCancelled()) {
+                                continue;
+                            }
+                            // CraftBukkit end
                             entity.startRiding(this);
                         } else {
                             entity.collide(this);
@@ -301,7 +373,7 @@
     }
 
     protected double o() {
-        return 0.4D;
+        return this.maxSpeed; // CraftBukkit
     }
 
     public void a(int i, int j, int k, boolean flag) {}
@@ -312,16 +384,20 @@
         this.motX = MathHelper.a(this.motX, -d0, d0);
         this.motZ = MathHelper.a(this.motZ, -d0, d0);
         if (this.onGround) {
-            this.motX *= 0.5D;
-            this.motY *= 0.5D;
-            this.motZ *= 0.5D;
+            // CraftBukkit start - replace magic numbers with our variables
+            this.motX *= this.derailedX;
+            this.motY *= this.derailedY;
+            this.motZ *= this.derailedZ;
+            // CraftBukkit end
         }
 
         this.move(this.motX, this.motY, this.motZ);
         if (!this.onGround) {
-            this.motX *= 0.949999988079071D;
-            this.motY *= 0.949999988079071D;
-            this.motZ *= 0.949999988079071D;
+            // CraftBukkit start - replace magic numbers with our variables
+            this.motX *= this.flyingX;
+            this.motY *= this.flyingY;
+            this.motZ *= this.flyingZ;
+            // CraftBukkit end
         }
 
     }
@@ -509,7 +585,7 @@
     }
 
     protected void r() {
-        if (this.isVehicle()) {
+        if (this.isVehicle() || !this.slowWhenEmpty) { // CraftBukkit - add !this.slowWhenEmpty
             this.motX *= 0.996999979019165D;
             this.motY *= 0.0D;
             this.motZ *= 0.996999979019165D;
@@ -854,4 +930,26 @@
 
         }
     }
+
+    // CraftBukkit start - Methods for getting and setting flying and derailed velocity modifiers
+    public Vector getFlyingVelocityMod() {
+        return new Vector(flyingX, flyingY, flyingZ);
+    }
+
+    public void setFlyingVelocityMod(Vector flying) {
+        flyingX = flying.getX();
+        flyingY = flying.getY();
+        flyingZ = flying.getZ();
+    }
+
+    public Vector getDerailedVelocityMod() {
+        return new Vector(derailedX, derailedY, derailedZ);
+    }
+
+    public void setDerailedVelocityMod(Vector derailed) {
+        derailedX = derailed.getX();
+        derailedY = derailed.getY();
+        derailedZ = derailed.getZ();
+    }
+    // CraftBukkit end
 }
