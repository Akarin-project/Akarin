--- a/net/minecraft/server/PlayerInteractManager.java
+++ b/net/minecraft/server/PlayerInteractManager.java
@@ -1,5 +1,13 @@
 package net.minecraft.server;
 
+// CraftBukkit start
+import org.bukkit.event.block.BlockBreakEvent;
+import org.bukkit.craftbukkit.event.CraftEventFactory;
+import org.bukkit.event.Event;
+import org.bukkit.event.block.Action;
+import org.bukkit.event.player.PlayerInteractEvent;
+// CraftBukkit end
+
 public class PlayerInteractManager {
 
     public World world;
@@ -26,7 +34,7 @@
         this.gamemode = worldsettings_enumgamemode;
         worldsettings_enumgamemode.a(this.player.abilities);
         this.player.updateAbilities();
-        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}));
+        this.player.server.getPlayerList().sendAll(new PacketPlayOutPlayerInfo(PacketPlayOutPlayerInfo.EnumPlayerInfoAction.UPDATE_GAME_MODE, new EntityPlayer[] { this.player}), this.player); // CraftBukkit
         this.world.everyoneSleeping();
     }
 
@@ -51,7 +59,7 @@
     }
 
     public void a() {
-        ++this.currentTick;
+        this.currentTick = MinecraftServer.currentTick; // CraftBukkit;
         float f;
         int i;
 
@@ -98,6 +106,19 @@
     }
 
     public void a(BlockPosition blockposition, EnumDirection enumdirection) {
+        // CraftBukkit start
+        PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(this.player, Action.LEFT_CLICK_BLOCK, blockposition, enumdirection, this.player.inventory.getItemInHand(), EnumHand.MAIN_HAND);
+        if (event.isCancelled()) {
+            // Let the client know the block still exists
+            ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            // Update any tile entity data for this block
+            TileEntity tileentity = this.world.getTileEntity(blockposition);
+            if (tileentity != null) {
+                this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+            }
+            return;
+        }
+        // CraftBukkit end
         if (this.isCreative()) {
             if (!this.world.douseFire((EntityHuman) null, blockposition, enumdirection)) {
                 this.breakBlock(blockposition);
@@ -125,14 +146,48 @@
                 }
             }
 
-            this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+            // this.world.douseFire((EntityHuman) null, blockposition, enumdirection); // CraftBukkit - Moved down
             this.lastDigTick = this.currentTick;
             float f = 1.0F;
 
-            if (iblockdata.getMaterial() != Material.AIR) {
+            // CraftBukkit start - Swings at air do *NOT* exist.
+            if (event.useInteractedBlock() == Event.Result.DENY) {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                IBlockData data = this.world.getType(blockposition);
+                if (block == Blocks.WOODEN_DOOR) {
+                    // For some reason *BOTH* the bottom/top part have to be marked updated.
+                    boolean bottom = data.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, bottom ? blockposition.up() : blockposition.down()));
+                } else if (block == Blocks.TRAPDOOR) {
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                }
+            } else if (iblockdata.getMaterial() != Material.AIR) {
                 block.attack(this.world, blockposition, this.player);
                 f = iblockdata.a((EntityHuman) this.player, this.player.world, blockposition);
+                // Allow fire punching to be blocked
+                this.world.douseFire((EntityHuman) null, blockposition, enumdirection);
+            }
+
+            if (event.useItemInHand() == Event.Result.DENY) {
+                // If we 'insta destroyed' then the client needs to be informed.
+                if (f > 1.0f) {
+                    ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                }
+                return;
+            }
+            org.bukkit.event.block.BlockDamageEvent blockEvent = CraftEventFactory.callBlockDamageEvent(this.player, blockposition.getX(), blockposition.getY(), blockposition.getZ(), this.player.inventory.getItemInHand(), f >= 1.0f);
+
+            if (blockEvent.isCancelled()) {
+                // Let the client know the block still exists
+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                return;
+            }
+
+            if (blockEvent.getInstaBreak()) {
+                f = 2.0f;
             }
+            // CraftBukkit end
 
             if (iblockdata.getMaterial() != Material.AIR && f >= 1.0F) {
                 this.breakBlock(blockposition);
@@ -150,6 +205,7 @@
 
     public void a(BlockPosition blockposition) {
         if (blockposition.equals(this.f)) {
+            this.currentTick = MinecraftServer.currentTick; // CraftBukkit
             int i = this.currentTick - this.lastDigTick;
             IBlockData iblockdata = this.world.getType(blockposition);
 
@@ -167,6 +223,10 @@
                     this.j = this.lastDigTick;
                 }
             }
+        // CraftBukkit start - Force block reset to client
+        } else {
+            this.player.playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+            // CraftBukkit end
         }
 
     }
@@ -190,12 +250,75 @@
     }
 
     public boolean breakBlock(BlockPosition blockposition) {
-        if (this.gamemode.isCreative() && this.player.getItemInMainHand() != null && this.player.getItemInMainHand().getItem() instanceof ItemSword) {
+        // CraftBukkit start - fire BlockBreakEvent
+        BlockBreakEvent event = null;
+
+        if (this.player instanceof EntityPlayer) {
+            org.bukkit.block.Block block = this.world.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ());
+
+            // Sword + Creative mode pre-cancel
+            boolean isSwordNoBreak = this.gamemode.isCreative() && this.player.getItemInMainHand() != null && this.player.getItemInMainHand().getItem() instanceof ItemSword;
+
+            // Tell client the block is gone immediately then process events
+            // Don't tell the client if its a creative sword break because its not broken!
+            if (world.getTileEntity(blockposition) == null && !isSwordNoBreak) {
+                PacketPlayOutBlockChange packet = new PacketPlayOutBlockChange(this.world, blockposition);
+                packet.block = Blocks.AIR.getBlockData();
+                ((EntityPlayer) this.player).playerConnection.sendPacket(packet);
+            }
+
+            event = new BlockBreakEvent(block, this.player.getBukkitEntity());
+
+            // Sword + Creative mode pre-cancel
+            event.setCancelled(isSwordNoBreak);
+
+            // Calculate default block experience
+            IBlockData nmsData = this.world.getType(blockposition);
+            Block nmsBlock = nmsData.getBlock();
+
+            ItemStack itemstack = this.player.getEquipment(EnumItemSlot.MAINHAND);
+
+            if (nmsBlock != null && !event.isCancelled() && !this.isCreative() && this.player.hasBlock(nmsBlock.getBlockData())) {
+                // Copied from block.a(World world, EntityHuman entityhuman, BlockPosition blockposition, IBlockData iblockdata, TileEntity tileentity)
+                // PAIL: checkme each update
+                if (!(nmsBlock.p() && EnchantmentManager.getEnchantmentLevel(Enchantments.SILK_TOUCH, itemstack) > 0)) {
+                    int data = block.getData();
+                    int bonusLevel = EnchantmentManager.getEnchantmentLevel(Enchantments.LOOT_BONUS_BLOCKS, itemstack);
+
+                    event.setExpToDrop(nmsBlock.getExpDrop(this.world, nmsData, bonusLevel));
+                }
+            }
+
+            this.world.getServer().getPluginManager().callEvent(event);
+
+            if (event.isCancelled()) {
+                if (isSwordNoBreak) {
+                    return false;
+                }
+                // Let the client know the block still exists
+                ((EntityPlayer) this.player).playerConnection.sendPacket(new PacketPlayOutBlockChange(this.world, blockposition));
+                // Update any tile entity data for this block
+                TileEntity tileentity = this.world.getTileEntity(blockposition);
+                if (tileentity != null) {
+                    this.player.playerConnection.sendPacket(tileentity.getUpdatePacket());
+                }
+                return false;
+            }
+        }
+        if (false && this.gamemode.isCreative() && this.player.getItemInMainHand() != null && this.player.getItemInMainHand().getItem() instanceof ItemSword) { // CraftBukkit - false
             return false;
         } else {
             IBlockData iblockdata = this.world.getType(blockposition);
+            if (iblockdata.getBlock() == Blocks.AIR) return false; // CraftBukkit - A plugin set block to air without cancelling
             TileEntity tileentity = this.world.getTileEntity(blockposition);
 
+            // CraftBukkit start - Special case skulls, their item data comes from a tile entity
+            if (iblockdata.getBlock() == Blocks.SKULL && !this.isCreative()) {
+                iblockdata.getBlock().dropNaturally(world, blockposition, iblockdata, 1.0F, 0);
+                return this.c(blockposition);
+            }
+            // CraftBukkit end
+
             if (iblockdata.getBlock() instanceof BlockCommand && !this.player.a(2, "")) {
                 this.world.notify(blockposition, iblockdata, iblockdata, 3);
                 return false;
@@ -240,6 +363,12 @@
                     }
                 }
 
+                // CraftBukkit start - Drop event experience
+                if (flag && event != null) {
+                    iblockdata.getBlock().dropExperience(this.world, blockposition, event.getExpToDrop());
+                }
+                // CraftBukkit end
+
                 return flag;
             }
         }
@@ -280,7 +409,13 @@
         }
     }
 
+    // CraftBukkit start
+    public boolean interactResult = false;
+    public boolean firedInteract = false;
+    // CraftBukkit end
+
     public EnumInteractionResult a(EntityHuman entityhuman, World world, ItemStack itemstack, EnumHand enumhand, BlockPosition blockposition, EnumDirection enumdirection, float f, float f1, float f2) {
+        /* CraftBukkit start - whole method
         if (this.gamemode == WorldSettings.EnumGamemode.SPECTATOR) {
             TileEntity tileentity = world.getTileEntity(blockposition);
 
@@ -329,6 +464,72 @@
                 return itemstack.placeItem(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
             }
         }
+        // Interact event */
+        IBlockData blockdata = world.getType(blockposition);
+        EnumInteractionResult result = EnumInteractionResult.FAIL;
+        if (blockdata.getBlock() != Blocks.AIR) {
+            boolean cancelledBlock = false;
+
+            if (this.gamemode == WorldSettings.EnumGamemode.SPECTATOR) {
+                TileEntity tileentity = world.getTileEntity(blockposition);
+                cancelledBlock = !(tileentity instanceof ITileInventory || tileentity instanceof IInventory);
+            }
+
+            if (!entityhuman.getBukkitEntity().isOp() && itemstack != null && Block.asBlock(itemstack.getItem()) instanceof BlockCommand) {
+                cancelledBlock = true;
+            }
+
+            PlayerInteractEvent event = CraftEventFactory.callPlayerInteractEvent(entityhuman, Action.RIGHT_CLICK_BLOCK, blockposition, enumdirection, itemstack, cancelledBlock, enumhand);
+            firedInteract = true;
+            interactResult = event.useItemInHand() == Event.Result.DENY;
+
+            if (event.useInteractedBlock() == Event.Result.DENY) {
+                // If we denied a door from opening, we need to send a correcting update to the client, as it already opened the door.
+                if (blockdata.getBlock() instanceof BlockDoor) {
+                    boolean bottom = blockdata.get(BlockDoor.HALF) == BlockDoor.EnumDoorHalf.LOWER;
+                    ((EntityPlayer) entityhuman).playerConnection.sendPacket(new PacketPlayOutBlockChange(world, bottom ? blockposition.up() : blockposition.down()));
+                }
+                result = (event.useItemInHand() != Event.Result.ALLOW) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+            } else if (this.gamemode == WorldSettings.EnumGamemode.SPECTATOR) {
+                TileEntity tileentity = world.getTileEntity(blockposition);
+
+                if (tileentity instanceof ITileInventory) {
+                    Block block = world.getType(blockposition).getBlock();
+                    ITileInventory itileinventory = (ITileInventory) tileentity;
+
+                    if (itileinventory instanceof TileEntityChest && block instanceof BlockChest) {
+                        itileinventory = ((BlockChest) block).c(world, blockposition); // PAIL: rename
+                    }
+
+                    if (itileinventory != null) {
+                        entityhuman.openContainer(itileinventory);
+                        return EnumInteractionResult.SUCCESS;
+                    }
+                } else if (tileentity instanceof IInventory) {
+                    entityhuman.openContainer((IInventory) tileentity);
+                    return EnumInteractionResult.SUCCESS;
+                }
+
+                return EnumInteractionResult.PASS;
+            } else if (!entityhuman.isSneaking() || entityhuman.getItemInMainHand() == null && entityhuman.getItemInOffHand() == null) {
+                result = blockdata.getBlock().interact(world, blockposition, blockdata, entityhuman, enumhand, itemstack, enumdirection, f, f1, f2) ? EnumInteractionResult.SUCCESS : EnumInteractionResult.PASS;
+            }
+
+            if (itemstack != null && result != EnumInteractionResult.SUCCESS && !interactResult) { // add !interactResult SPIGOT-764
+                int j1 = itemstack.getData();
+                int k1 = itemstack.count;
+
+                result = itemstack.placeItem(entityhuman, world, blockposition, enumhand, enumdirection, f, f1, f2);
+
+                // The item count should not decrement in Creative mode.
+                if (this.isCreative()) {
+                    itemstack.setData(j1);
+                    itemstack.count = k1;
+                }
+            }
+        }
+        return result;
+        // CraftBukkit end
     }
 
     public void a(WorldServer worldserver) {
