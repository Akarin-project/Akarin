--- a/net/minecraft/server/WorldServer.java
+++ b/net/minecraft/server/WorldServer.java
@@ -3,7 +3,6 @@
 import com.google.common.base.Predicate;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Maps;
-import com.google.common.collect.Sets;
 import com.google.common.util.concurrent.ListenableFuture;
 import java.io.File;
 import java.util.ArrayList;
@@ -12,20 +11,29 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Random;
-import java.util.Set;
-import java.util.TreeSet;
 import java.util.UUID;
 import org.apache.logging.log4j.LogManager;
 import org.apache.logging.log4j.Logger;
 
+// CraftBukkit start
+import java.util.logging.Level;
+
+import org.bukkit.WeatherType;
+import org.bukkit.block.BlockState;
+import org.bukkit.craftbukkit.util.HashTreeSet;
+
+import org.bukkit.event.block.BlockFormEvent;
+import org.bukkit.event.weather.LightningStrikeEvent;
+// CraftBukkit end
+
 public class WorldServer extends World implements IAsyncTaskHandler {
 
     private static final Logger a = LogManager.getLogger();
     private final MinecraftServer server;
     public EntityTracker tracker;
     private final PlayerChunkMap manager;
-    private final Set<NextTickListEntry> nextTickListHash = Sets.newHashSet();
-    private final TreeSet<NextTickListEntry> nextTickList = new TreeSet();
+    // private final Set<NextTickListEntry> nextTickListHash = Sets.newHashSet();
+    private final HashTreeSet<NextTickListEntry> nextTickList = new HashTreeSet<NextTickListEntry>(); // CraftBukkit - HashTreeSet
     private final Map<UUID, Entity> entitiesByUUID = Maps.newHashMap();
     public boolean savingDisabled;
     private boolean O;
@@ -37,14 +45,22 @@
     private int T;
     private List<NextTickListEntry> U = Lists.newArrayList();
 
-    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler) {
-        super(idatamanager, worlddata, DimensionManager.a(i).d(), methodprofiler, false);
+    // CraftBukkit start
+    public final int dimension;
+
+    // Add env and gen to constructor
+    public WorldServer(MinecraftServer minecraftserver, IDataManager idatamanager, WorldData worlddata, int i, MethodProfiler methodprofiler, org.bukkit.World.Environment env, org.bukkit.generator.ChunkGenerator gen) {
+        super(idatamanager, worlddata, DimensionManager.a(env.getId()).d(), methodprofiler, false, gen, env);
+        this.dimension = i;
+        this.pvpMode = minecraftserver.getPVP();
+        worlddata.world = this;
+        // CraftBukkit end
         this.server = minecraftserver;
         this.tracker = new EntityTracker(this);
         this.manager = new PlayerChunkMap(this);
         this.worldProvider.a((World) this);
         this.chunkProvider = this.n();
-        this.portalTravelAgent = new PortalTravelAgent(this);
+        this.portalTravelAgent = new org.bukkit.craftbukkit.CraftTravelAgent(this); // CraftBukkit
         this.H();
         this.I();
         this.getWorldBorder().a(minecraftserver.aD());
@@ -63,6 +79,7 @@
             this.villages.a((World) this);
         }
 
+        if (getServer().getScoreboardManager() == null) { // CraftBukkit
         this.scoreboard = new ScoreboardServer(this.server);
         PersistentScoreboard persistentscoreboard = (PersistentScoreboard) this.worldMaps.get(PersistentScoreboard.class, "scoreboard");
 
@@ -73,6 +90,11 @@
 
         persistentscoreboard.a(this.scoreboard);
         ((ScoreboardServer) this.scoreboard).a((Runnable) (new RunnableSaveScoreboard(persistentscoreboard)));
+        // CraftBukkit start
+        } else {
+            this.scoreboard = getServer().getScoreboardManager().getMainScoreboard().getHandle();
+        }
+        // CraftBukkit end
         this.B = new LootTableRegistry(new File(new File(this.dataManager.getDirectory(), "data"), "loot_tables"));
         this.getWorldBorder().setCenter(this.worldData.B(), this.worldData.C());
         this.getWorldBorder().setDamageAmount(this.worldData.H());
@@ -85,9 +107,98 @@
             this.getWorldBorder().setSize(this.worldData.D());
         }
 
+        // CraftBukkit start
+        if (generator != null) {
+            getWorld().getPopulators().addAll(generator.getDefaultPopulators(getWorld()));
+        }
+        // CraftBukkit end
+
         return this;
     }
 
+    // CraftBukkit start
+    @Override
+    public TileEntity getTileEntity(BlockPosition pos) {
+        TileEntity result = super.getTileEntity(pos);
+        Block type = getType(pos).getBlock();
+
+        if (type == Blocks.CHEST) {
+            if (!(result instanceof TileEntityChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.FURNACE) {
+            if (!(result instanceof TileEntityFurnace)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DROPPER) {
+            if (!(result instanceof TileEntityDropper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.DISPENSER) {
+            if (!(result instanceof TileEntityDispenser)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.JUKEBOX) {
+            if (!(result instanceof BlockJukeBox.TileEntityRecordPlayer)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.NOTEBLOCK) {
+            if (!(result instanceof TileEntityNote)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.MOB_SPAWNER) {
+            if (!(result instanceof TileEntityMobSpawner)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if ((type == Blocks.STANDING_SIGN) || (type == Blocks.WALL_SIGN)) {
+            if (!(result instanceof TileEntitySign)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.ENDER_CHEST) {
+            if (!(result instanceof TileEntityEnderChest)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BREWING_STAND) {
+            if (!(result instanceof TileEntityBrewingStand)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.BEACON) {
+            if (!(result instanceof TileEntityBeacon)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        } else if (type == Blocks.HOPPER) {
+            if (!(result instanceof TileEntityHopper)) {
+                result = fixTileEntity(pos, type, result);
+            }
+        }
+
+        return result;
+    }
+
+    private TileEntity fixTileEntity(BlockPosition pos, Block type, TileEntity found) {
+        this.getServer().getLogger().log(Level.SEVERE, "Block at {0},{1},{2} is {3} but has {4}" + ". "
+                + "Bukkit will attempt to fix this, but there may be additional damage that we cannot recover.", new Object[]{pos.getX(), pos.getY(), pos.getZ(), org.bukkit.Material.getMaterial(Block.getId(type)).toString(), found});
+
+        if (type instanceof ITileEntity) {
+            TileEntity replacement = ((ITileEntity) type).a(this, type.toLegacyData(this.getType(pos)));
+            replacement.world = this;
+            this.setTileEntity(pos, replacement);
+            return replacement;
+        } else {
+            this.getServer().getLogger().severe("Don't know how to fix for this type... Can't do anything! :(");
+            return found;
+        }
+    }
+
+    private boolean canSpawn(int x, int z) {
+        if (this.generator != null) {
+            return this.generator.canSpawn(this.getWorld(), x, z);
+        } else {
+            return this.worldProvider.canSpawn(x, z);
+        }
+    }
+    // CraftBukkit end
+
     public void doTick() {
         super.doTick();
         if (this.getWorldData().isHardcore() && this.getDifficulty() != EnumDifficulty.HARD) {
@@ -105,9 +216,11 @@
             this.f();
         }
 
-        this.methodProfiler.a("mobSpawner");
-        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES) {
-            this.spawnerCreature.a(this, this.allowMonsters, this.allowAnimals, this.worldData.getTime() % 400L == 0L);
+        // CraftBukkit start - Only call spawner if we have players online and the world allows for mobs or animals
+        long time = this.worldData.getTime();
+        if (this.getGameRules().getBoolean("doMobSpawning") && this.worldData.getType() != WorldType.DEBUG_ALL_BLOCK_STATES && (this.allowMonsters || this.allowAnimals) && (this instanceof WorldServer && this.players.size() > 0)) {
+            this.spawnerCreature.a(this, this.allowMonsters && (this.ticksPerMonsterSpawns != 0 && time % this.ticksPerMonsterSpawns == 0L), this.allowAnimals && (this.ticksPerAnimalSpawns != 0 && time % this.ticksPerAnimalSpawns == 0L), this.worldData.getTime() % 400L == 0L);
+            // CraftBukkit end
         }
 
         this.methodProfiler.c("chunkSource");
@@ -136,6 +249,8 @@
         this.portalTravelAgent.a(this.getTime());
         this.methodProfiler.b();
         this.ao();
+
+        this.getWorld().processChunkGC(); // CraftBukkit
     }
 
     public BiomeBase.BiomeMeta a(EnumCreatureType enumcreaturetype, BlockPosition blockposition) {
@@ -162,7 +277,7 @@
 
                 if (entityhuman.isSpectator()) {
                     ++i;
-                } else if (entityhuman.isSleeping()) {
+                } else if (entityhuman.isSleeping() || entityhuman.fauxSleeping) {
                     ++j;
                 }
             }
@@ -188,25 +303,46 @@
     }
 
     private void c() {
-        this.worldData.setWeatherDuration(0);
         this.worldData.setStorm(false);
-        this.worldData.setThunderDuration(0);
+        // CraftBukkit start
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldData.hasStorm()) {
+            this.worldData.setWeatherDuration(0);
+        }
+        // CraftBukkit end
         this.worldData.setThundering(false);
+        // CraftBukkit start
+        // If we stop due to everyone sleeping we should reset the weather duration to some other random value.
+        // Not that everyone ever manages to get the whole server to sleep at the same time....
+        if (!this.worldData.isThundering()) {
+            this.worldData.setThunderDuration(0);
+        }
+        // CraftBukkit end
     }
 
     public boolean everyoneDeeplySleeping() {
         if (this.O && !this.isClientSide) {
             Iterator iterator = this.players.iterator();
 
+            // CraftBukkit - This allows us to assume that some people are in bed but not really, allowing time to pass in spite of AFKers
+            boolean foundActualSleepers = false;
+
             EntityHuman entityhuman;
 
             do {
                 if (!iterator.hasNext()) {
-                    return true;
+                    return foundActualSleepers;
                 }
 
                 entityhuman = (EntityHuman) iterator.next();
-            } while (entityhuman.isSpectator() || entityhuman.isDeeplySleeping());
+
+                // CraftBukkit start
+                if (entityhuman.isDeeplySleeping()) {
+                    foundActualSleepers = true;
+                }
+            } while (!entityhuman.isSpectator() || entityhuman.isDeeplySleeping() || entityhuman.fauxSleeping);
+            // CraftBukkit end
 
             return false;
         } else {
@@ -293,11 +429,29 @@
                     BlockPosition blockposition1 = blockposition.down();
 
                     if (this.v(blockposition1)) {
-                        this.setTypeUpdate(blockposition1, Blocks.ICE.getBlockData());
+                        // CraftBukkit start
+                        BlockState blockState = this.getWorld().getBlockAt(blockposition1.getX(), blockposition1.getY(), blockposition1.getZ()).getState();
+                        blockState.setTypeId(Block.getId(Blocks.ICE));
+
+                        BlockFormEvent iceBlockForm = new BlockFormEvent(blockState.getBlock(), blockState);
+                        this.getServer().getPluginManager().callEvent(iceBlockForm);
+                        if (!iceBlockForm.isCancelled()) {
+                            blockState.update(true);
+                        }
+                        // CraftBukkit end
                     }
 
                     if (flag && this.f(blockposition, true)) {
-                        this.setTypeUpdate(blockposition, Blocks.SNOW_LAYER.getBlockData());
+                        // CraftBukkit start
+                        BlockState blockState = this.getWorld().getBlockAt(blockposition.getX(), blockposition.getY(), blockposition.getZ()).getState();
+                        blockState.setTypeId(Block.getId(Blocks.SNOW_LAYER));
+
+                        BlockFormEvent snow = new BlockFormEvent(blockState.getBlock(), blockState);
+                        this.getServer().getPluginManager().callEvent(snow);
+                        if (!snow.isCancelled()) {
+                            blockState.update(true);
+                        }
+                        // CraftBukkit end
                     }
 
                     if (flag && this.getBiome(blockposition1).d()) {
@@ -372,7 +526,7 @@
     public boolean b(BlockPosition blockposition, Block block) {
         NextTickListEntry nextticklistentry = new NextTickListEntry(blockposition, block);
 
-        return this.nextTickListHash.contains(nextticklistentry);
+        return this.nextTickList.contains(nextticklistentry); // CraftBukkit
     }
 
     public void a(BlockPosition blockposition, Block block, int i) {
@@ -413,8 +567,8 @@
                 nextticklistentry.a(j);
             }
 
-            if (!this.nextTickListHash.contains(nextticklistentry)) {
-                this.nextTickListHash.add(nextticklistentry);
+            // CraftBukkit - use nextTickList
+            if (!this.nextTickList.contains(nextticklistentry)) {
                 this.nextTickList.add(nextticklistentry);
             }
         }
@@ -436,15 +590,15 @@
             nextticklistentry.a((long) i + this.worldData.getTime());
         }
 
-        if (!this.nextTickListHash.contains(nextticklistentry)) {
-            this.nextTickListHash.add(nextticklistentry);
+        // CraftBukkit - use nextTickList
+        if (!this.nextTickList.contains(nextticklistentry)) {
             this.nextTickList.add(nextticklistentry);
         }
 
     }
 
     public void tickEntities() {
-        if (this.players.isEmpty()) {
+        if (false && this.players.isEmpty()) { // CraftBukkit - this prevents entity cleanup, other issues on servers with no players
             if (this.emptyTime++ >= 300) {
                 return;
             }
@@ -514,11 +668,17 @@
         } else {
             int i = this.nextTickList.size();
 
-            if (i != this.nextTickListHash.size()) {
+            if (false) { // CraftBukkit
                 throw new IllegalStateException("TickNextTick list out of synch");
             } else {
                 if (i > 1000) {
-                    i = 1000;
+                    // CraftBukkit start - If the server has too much to process over time, try to alleviate that
+                    if (i > 20 * 1000) {
+                        i = i / 20;
+                    } else {
+                        i = 1000;
+                    }
+                    // CraftBukkit end
                 }
 
                 this.methodProfiler.a("cleaning");
@@ -531,8 +691,9 @@
                         break;
                     }
 
+                    // CraftBukkit - use nextTickList
                     this.nextTickList.remove(nextticklistentry);
-                    this.nextTickListHash.remove(nextticklistentry);
+                    // this.nextTickListHash.remove(nextticklistentry);
                     this.U.add(nextticklistentry);
                 }
 
@@ -600,7 +761,7 @@
                 if (blockposition.getX() >= structureboundingbox.a && blockposition.getX() < structureboundingbox.d && blockposition.getZ() >= structureboundingbox.c && blockposition.getZ() < structureboundingbox.f) {
                     if (flag) {
                         if (i == 0) {
-                            this.nextTickListHash.remove(nextticklistentry);
+                            // this.nextTickListHash.remove(nextticklistentry); // CraftBukkit - removed
                         }
 
                         iterator.remove();
@@ -618,6 +779,7 @@
         return arraylist;
     }
 
+    /* CraftBukkit start - We prevent spawning in general, so this butchering is not needed
     public void entityJoinedWorld(Entity entity, boolean flag) {
         if (!this.getSpawnAnimals() && (entity instanceof EntityAnimal || entity instanceof EntityWaterAnimal)) {
             entity.die();
@@ -629,6 +791,7 @@
 
         super.entityJoinedWorld(entity, flag);
     }
+    // CraftBukkit end */
 
     private boolean getSpawnNPCs() {
         return this.server.getSpawnNPCs();
@@ -641,12 +804,42 @@
     protected IChunkProvider n() {
         IChunkLoader ichunkloader = this.dataManager.createChunkLoader(this.worldProvider);
 
-        return new ChunkProviderServer(this, ichunkloader, this.worldProvider.getChunkGenerator());
+        // CraftBukkit start
+        org.bukkit.craftbukkit.generator.InternalChunkGenerator gen;
+
+        if (this.generator != null) {
+            gen = new org.bukkit.craftbukkit.generator.CustomChunkGenerator(this, this.getSeed(), this.generator);
+        } else if (this.worldProvider instanceof WorldProviderHell) {
+            gen = new org.bukkit.craftbukkit.generator.NetherChunkGenerator(this, this.getSeed());
+        } else if (this.worldProvider instanceof WorldProviderTheEnd) {
+            gen = new org.bukkit.craftbukkit.generator.SkyLandsChunkGenerator(this, this.getSeed());
+        } else {
+            gen = new org.bukkit.craftbukkit.generator.NormalChunkGenerator(this, this.getSeed());
+        }
+
+        return new ChunkProviderServer(this, ichunkloader, gen);
+        // CraftBukkit end
     }
 
     public List<TileEntity> getTileEntities(int i, int j, int k, int l, int i1, int j1) {
         ArrayList arraylist = Lists.newArrayList();
 
+        // CraftBukkit start - Get tile entities from chunks instead of world
+        for (int chunkX = (i >> 4); chunkX <= ((l - 1) >> 4); chunkX++) {
+            for (int chunkZ = (k >> 4); chunkZ <= ((j1 - 1) >> 4); chunkZ++) {
+                Chunk chunk = getChunkAt(chunkX, chunkZ);
+                if (chunk == null) {
+                    continue;
+                }
+                for (Object te : chunk.tileEntities.values()) {
+                    TileEntity tileentity = (TileEntity) te;
+                    if ((tileentity.position.getX() >= i) && (tileentity.position.getY() >= j) && (tileentity.position.getZ() >= k) && (tileentity.position.getX() < l) && (tileentity.position.getY() < i1) && (tileentity.position.getZ() < j1)) {
+                        arraylist.add(tileentity);
+                    }
+                }
+            }
+        }
+        /*
         for (int k1 = 0; k1 < this.tileEntityList.size(); ++k1) {
             TileEntity tileentity = (TileEntity) this.tileEntityList.get(k1);
             BlockPosition blockposition = tileentity.getPosition();
@@ -655,6 +848,8 @@
                 arraylist.add(tileentity);
             }
         }
+        */
+        // CraftBukkit end
 
         return arraylist;
     }
@@ -718,6 +913,23 @@
             int j = this.worldProvider.getSeaLevel();
             int k = 8;
 
+            // CraftBukkit start
+            if (this.generator != null) {
+                Random rand = new Random(this.getSeed());
+                org.bukkit.Location spawn = this.generator.getFixedSpawnLocation(((WorldServer) this).getWorld(), rand);
+
+                if (spawn != null) {
+                    if (spawn.getWorld() != ((WorldServer) this).getWorld()) {
+                        throw new IllegalStateException("Cannot set spawn point for " + this.worldData.getName() + " to be in another world (" + spawn.getWorld().getName() + ")");
+                    } else {
+                        this.worldData.setSpawn(new BlockPosition(spawn.getBlockX(), spawn.getBlockY(), spawn.getBlockZ()));
+                        this.isLoading = false;
+                        return;
+                    }
+                }
+            }
+            // CraftBukkit end
+
             if (blockposition != null) {
                 i = blockposition.getX();
                 k = blockposition.getZ();
@@ -727,7 +939,7 @@
 
             int l = 0;
 
-            while (!this.worldProvider.canSpawn(i, k)) {
+            while (!this.canSpawn(i, k)) { // CraftBukkit - use our own canSpawn
                 i += random.nextInt(64) - random.nextInt(64);
                 k += random.nextInt(64) - random.nextInt(64);
                 ++l;
@@ -768,6 +980,7 @@
         ChunkProviderServer chunkproviderserver = this.getChunkProviderServer();
 
         if (chunkproviderserver.e()) {
+            org.bukkit.Bukkit.getPluginManager().callEvent(new org.bukkit.event.world.WorldSaveEvent(getWorld())); // CraftBukkit
             if (iprogressupdate != null) {
                 iprogressupdate.a("Saving level");
             }
@@ -778,7 +991,8 @@
             }
 
             chunkproviderserver.a(flag);
-            ArrayList arraylist = Lists.newArrayList(chunkproviderserver.a());
+            // CraftBukkit - ArrayList -> Collection
+            Collection arraylist = chunkproviderserver.a();
             Iterator iterator = arraylist.iterator();
 
             while (iterator.hasNext()) {
@@ -813,6 +1027,12 @@
             }
         }
 
+        // CraftBukkit start - Save secondary data for nether/end
+        if (this instanceof SecondaryWorldServer) {
+            ((SecondaryWorldServer) this).c();
+        }
+        // CraftBukkit end
+
         this.worldData.a(this.getWorldBorder().getSize());
         this.worldData.d(this.getWorldBorder().getCenterX());
         this.worldData.c(this.getWorldBorder().getCenterZ());
@@ -822,8 +1042,12 @@
         this.worldData.k(this.getWorldBorder().getWarningTime());
         this.worldData.b(this.getWorldBorder().j());
         this.worldData.e(this.getWorldBorder().i());
+        // CraftBukkit start - save worldMaps once, rather than once per shared world
+        if (!(this instanceof SecondaryWorldServer)) {
+            this.worldMaps.a();
+        }
         this.dataManager.saveWorldData(this.worldData, this.server.getPlayerList().t());
-        this.worldMaps.a();
+        // CraftBukkit end
     }
 
     public boolean addEntity(Entity entity) {
@@ -847,7 +1071,7 @@
 
     private boolean i(Entity entity) {
         if (entity.dead) {
-            WorldServer.a.warn("Tried to add entity " + EntityTypes.b(entity) + " but it was marked as removed already");
+            // WorldServer.a.warn("Tried to add entity " + EntityTypes.b(entity) + " but it was marked as removed already"); // CraftBukkit
             return false;
         } else {
             UUID uuid = entity.getUniqueID();
@@ -859,7 +1083,7 @@
                     this.f.remove(entity1);
                 } else {
                     if (!(entity instanceof EntityHuman)) {
-                        WorldServer.a.warn("Keeping entity " + EntityTypes.b(entity1) + " that already exists with UUID " + uuid.toString());
+                        // WorldServer.a.warn("Keeping entity " + EntityTypes.b(entity1) + " that already exists with UUID " + uuid.toString()); // CraftBukkit
                         return false;
                     }
 
@@ -902,6 +1126,14 @@
     }
 
     public boolean strikeLightning(Entity entity) {
+        // CraftBukkit start
+        LightningStrikeEvent lightning = new LightningStrikeEvent(this.getWorld(), (org.bukkit.entity.LightningStrike) entity.getBukkitEntity());
+        this.getServer().getPluginManager().callEvent(lightning);
+
+        if (lightning.isCancelled()) {
+            return false;
+        }
+        // CraftBukkit end
         if (super.strikeLightning(entity)) {
             this.server.getPlayerList().sendPacketNearby((EntityHuman) null, entity.locX, entity.locY, entity.locZ, 512.0D, this.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutSpawnEntityWeather(entity));
             return true;
@@ -919,10 +1151,20 @@
     }
 
     public Explosion createExplosion(Entity entity, double d0, double d1, double d2, float f, boolean flag, boolean flag1) {
+        // CraftBukkit start
+        Explosion explosion = super.createExplosion(entity, d0, d1, d2, f, flag, flag1);
+
+        if (explosion.wasCanceled) {
+            return explosion;
+        }
+
+        /* Remove
         Explosion explosion = new Explosion(this, entity, d0, d1, d2, f, flag, flag1);
 
         explosion.a();
         explosion.a(false);
+        */
+        // CraftBukkit end - TODO: Check if explosions are still properly implemented
         if (!flag1) {
             explosion.clearBlocks();
         }
@@ -968,7 +1210,8 @@
                 BlockActionData blockactiondata = (BlockActionData) iterator.next();
 
                 if (this.a(blockactiondata)) {
-                    this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, this.worldProvider.getDimensionManager().getDimensionID(), new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
+                    // CraftBukkit - this.worldProvider.dimension -> this.dimension
+                    this.server.getPlayerList().sendPacketNearby((EntityHuman) null, (double) blockactiondata.a().getX(), (double) blockactiondata.a().getY(), (double) blockactiondata.a().getZ(), 64.0D, dimension, new PacketPlayOutBlockAction(blockactiondata.a(), blockactiondata.d(), blockactiondata.b(), blockactiondata.c()));
                 }
             }
 
@@ -991,6 +1234,7 @@
         boolean flag = this.W();
 
         super.t();
+        /* CraftBukkit start
         if (this.n != this.o) {
             this.server.getPlayerList().a((Packet) (new PacketPlayOutGameStateChange(7, this.o)), this.worldProvider.getDimensionManager().getDimensionID());
         }
@@ -1009,6 +1253,21 @@
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(7, this.o));
             this.server.getPlayerList().sendAll(new PacketPlayOutGameStateChange(8, this.q));
         }
+        // */
+        if (flag != this.W()) {
+            // Only send weather packets to those affected
+            for (int i = 0; i < this.players.size(); ++i) {
+                if (((EntityPlayer) this.players.get(i)).world == this) {
+                    ((EntityPlayer) this.players.get(i)).setPlayerWeather((!flag ? WeatherType.DOWNFALL : WeatherType.CLEAR), false);
+                }
+            }
+        }
+        for (int i = 0; i < this.players.size(); ++i) {
+            if (((EntityPlayer) this.players.get(i)).world == this) {
+                ((EntityPlayer) this.players.get(i)).updateWeather(this.n, this.o, this.p, this.q);
+            }
+        }
+        // CraftBukkit end
 
     }
 
@@ -1037,10 +1296,20 @@
     }
 
     public void a(EnumParticle enumparticle, boolean flag, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, int... aint) {
+        // CraftBukkit - visibility api support
+        sendParticles(null, enumparticle, flag, d0, d1, d2, i, d3, d4, d5, d6, aint);
+    }
+
+    public void sendParticles(EntityPlayer sender, EnumParticle enumparticle, boolean flag, double d0, double d1, double d2, int i, double d3, double d4, double d5, double d6, int... aint) {
+        // CraftBukkit end
         PacketPlayOutWorldParticles packetplayoutworldparticles = new PacketPlayOutWorldParticles(enumparticle, flag, (float) d0, (float) d1, (float) d2, (float) d3, (float) d4, (float) d5, (float) d6, i, aint);
 
         for (int j = 0; j < this.players.size(); ++j) {
             EntityPlayer entityplayer = (EntityPlayer) this.players.get(j);
+            if (sender != null && !entityplayer.getBukkitEntity().canSee(sender.getBukkitEntity())) continue; // CraftBukkit
+            BlockPosition blockposition = entityplayer.getChunkCoordinates();
+            double d7 = blockposition.distanceSquared(d0, d1, d2);
+
 
             this.a(entityplayer, flag, d0, d1, d2, packetplayoutworldparticles);
         }
