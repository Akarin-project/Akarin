From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Sotr <i@omc.hk>
Date: Wed, 15 Apr 2020 22:18:01 +0700
Subject: [PATCH] Remove vanilla profiler callers


diff --git a/src/main/java/net/minecraft/server/ChunkProviderServer.java b/src/main/java/net/minecraft/server/ChunkProviderServer.java
index e2abda1bc37b9be0bae2506f0f26360693f3d30a..d6f4daeec90149ef402c2746a4a054c44f7eb21f 100644
--- a/src/main/java/net/minecraft/server/ChunkProviderServer.java
+++ b/src/main/java/net/minecraft/server/ChunkProviderServer.java
@@ -449,9 +449,9 @@ public class ChunkProviderServer extends IChunkProvider {
                 return ifLoaded;
             }
             // Paper end
-            GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
+            // GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler(); // Akarin - remove caller
 
-            gameprofilerfiller.c("getChunk");
+            // gameprofilerfiller.c("getChunk"); // Akarin - remove caller
             long k = ChunkCoordIntPair.pair(i, j);
 
             IChunkAccess ichunkaccess;
@@ -465,7 +465,7 @@ public class ChunkProviderServer extends IChunkProvider {
                 }
             }
 
-            gameprofilerfiller.c("getChunkCacheMiss");
+            // gameprofilerfiller.c("getChunkCacheMiss"); // Akarin  - remove caller
             // Paper start - Chunk Load/Gen Priority
             boolean prevBlocking = IS_CHUNK_LOAD_BLOCKING_MAIN;
             IS_CHUNK_LOAD_BLOCKING_MAIN = true;
@@ -539,12 +539,16 @@ public class ChunkProviderServer extends IChunkProvider {
             // CraftBukkit end
             this.chunkMapDistance.a(TicketType.UNKNOWN, chunkcoordintpair, l, chunkcoordintpair);
             if (this.a(playerchunk, l)) {
+                // Akarin start - remove caller
+                /*
                 GameProfilerFiller gameprofilerfiller = this.world.getMethodProfiler();
 
                 gameprofilerfiller.enter("chunkLoad");
+                */
+                // Akarin end
                 this.tickDistanceManager();
                 playerchunk = this.getChunk(k);
-                gameprofilerfiller.exit();
+                // gameprofilerfiller.exit(); // Akarin  - remove caller
                 if (this.a(playerchunk, l)) {
                     throw (IllegalStateException) SystemUtils.c(new IllegalStateException("No chunk holder after ticket has been added"));
                 }
@@ -693,33 +697,33 @@ public class ChunkProviderServer extends IChunkProvider {
 
     // CraftBukkit start - modelled on below
     public void purgeUnload() {
-        this.world.getMethodProfiler().enter("purge");
+        // // this.world.getMethodProfiler().enter("purge"); // Akarin - remove caller // Akarin - remove caller
         this.chunkMapDistance.purgeTickets();
         this.tickDistanceManager();
-        this.world.getMethodProfiler().exitEnter("unload");
+        // // this.world.getMethodProfiler().exitEnter("unload"); // Akarin - remove caller // Akarin - remove caller
         this.playerChunkMap.unloadChunks(() -> true);
-        this.world.getMethodProfiler().exit();
+                //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
         this.clearCache();
     }
     // CraftBukkit end
 
     public void tick(BooleanSupplier booleansupplier) {
-        this.world.getMethodProfiler().enter("purge");
+        // // this.world.getMethodProfiler().enter("purge"); // Akarin - remove caller // Akarin - remove caller
         this.world.timings.doChunkMap.startTiming(); // Spigot
         this.chunkMapDistance.purgeTickets();
         this.world.getMinecraftServer().midTickLoadChunks(); // Paper
         this.tickDistanceManager();
         this.world.timings.doChunkMap.stopTiming(); // Spigot
-        this.world.getMethodProfiler().exitEnter("chunks");
+        // this.world.getMethodProfiler().exitEnter("chunks"); // Akarin - remove caller
         this.world.timings.chunks.startTiming(); // Paper - timings
         this.tickChunks();
         this.world.timings.chunks.stopTiming(); // Paper - timings
         this.world.timings.doChunkUnload.startTiming(); // Spigot
-        this.world.getMethodProfiler().exitEnter("unload");
+        // // this.world.getMethodProfiler().exitEnter("unload"); // Akarin - remove caller // Akarin - remove caller
         this.playerChunkMap.unloadChunks(booleansupplier);
         this.world.getMinecraftServer().midTickLoadChunks(); // Paper
         this.world.timings.doChunkUnload.stopTiming(); // Spigot
-        this.world.getMethodProfiler().exit();
+                //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
         this.clearCache();
     }
 
@@ -763,7 +767,7 @@ public class ChunkProviderServer extends IChunkProvider {
                 player.lastEntitySpawnRadiusSquared = (double)((range << 4) * (range << 4)); // used in isOutsideRange
             }
             // Paper end - optimize isOutisdeRange
-            this.world.getMethodProfiler().enter("pollingChunks");
+            // this.world.getMethodProfiler().enter("pollingChunks"); // Akarin - remove caller
             int k = this.world.getGameRules().getInt(GameRules.RANDOM_TICK_SPEED);
             BlockPosition blockposition = this.world.getSpawn();
             // CraftBukkit start - Other mob type spawn tick rate
@@ -774,7 +778,7 @@ public class ChunkProviderServer extends IChunkProvider {
             boolean flag2 = spawnAnimalThisTick;
             // CraftBukkit end
 
-            this.world.getMethodProfiler().enter("naturalSpawnCount");
+            // this.world.getMethodProfiler().enter("naturalSpawnCount"); // Akarin - remove caller
             this.world.timings.countNaturalMobs.startTiming(); // Paper - timings
             int l = this.chunkMapDistance.b();
             EnumCreatureType[] aenumcreaturetype = EnumCreatureType.values();
@@ -796,7 +800,7 @@ public class ChunkProviderServer extends IChunkProvider {
             // Paper end
 
             this.world.timings.countNaturalMobs.stopTiming(); // Paper - timings
-            this.world.getMethodProfiler().exit();
+                    //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
             // Paper - replaced by above
             final int[] chunksTicked = {0}; this.playerChunkMap.forEachVisibleChunk((playerchunk) -> { // Paper - safe iterator incase chunk loads, also no wrapping
                 Optional<Chunk> optional = ((Either) playerchunk.b().getNow(PlayerChunk.UNLOADED_CHUNK)).left();
@@ -804,18 +808,18 @@ public class ChunkProviderServer extends IChunkProvider {
                 if (optional.isPresent()) {
                     Chunk chunk = (Chunk) optional.get();
 
-                    this.world.getMethodProfiler().enter("broadcast");
+                    // this.world.getMethodProfiler().enter("broadcast"); // Akarin - remove caller
                     this.world.timings.broadcastChunkUpdates.startTiming(); // Paper - timings
                     playerchunk.a(chunk);
                     this.world.timings.broadcastChunkUpdates.stopTiming(); // Paper - timings
-                    this.world.getMethodProfiler().exit();
+                            //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
                     ChunkCoordIntPair chunkcoordintpair = playerchunk.i();
 
                     if (!this.playerChunkMap.isOutsideOfRange(playerchunk, chunkcoordintpair, false)) { // Paper - optimise isOutsideOfRange
                         // Paper end
                         chunk.setInhabitedTime(chunk.getInhabitedTime() + j);
                         if (flag1 && (this.allowMonsters || this.allowAnimals) && this.world.getWorldBorder().isInBounds(chunk.getPos()) && !this.playerChunkMap.isOutsideOfRange(playerchunk, chunkcoordintpair, true)) { // Spigot // Paper - optimise isOutsideOfRange
-                            this.world.getMethodProfiler().enter("spawner");
+                            // this.world.getMethodProfiler().enter("spawner"); // Akarin - remove caller
                             this.world.timings.mobSpawn.startTiming(); // Spigot
                             EnumCreatureType[] aenumcreaturetype1 = aenumcreaturetype;
                             int i1 = aenumcreaturetype.length;
@@ -875,7 +879,7 @@ public class ChunkProviderServer extends IChunkProvider {
                             }
 
                             this.world.timings.mobSpawn.stopTiming(); // Spigot
-                            this.world.getMethodProfiler().exit();
+                                    //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
                         }
 
                         this.world.timings.chunkTicks.startTiming(); // Spigot // Paper
@@ -885,15 +889,15 @@ public class ChunkProviderServer extends IChunkProvider {
                     }
                 }
             });
-            this.world.getMethodProfiler().enter("customSpawners");
+            // this.world.getMethodProfiler().enter("customSpawners"); // Akarin - remove caller
             if (flag1) {
                 try (co.aikar.timings.Timing ignored = this.world.timings.miscMobSpawning.startTiming()) { // Paper - timings
                 this.chunkGenerator.doMobSpawning(this.world, this.allowMonsters, this.allowAnimals);
                 } // Paper - timings
             }
 
-            this.world.getMethodProfiler().exit();
-            this.world.getMethodProfiler().exit();
+                    //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
+                    //         // // // // // // this.world.getMethodProfiler().exit(); // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller // Akarin - remove caller
         }
 
         this.playerChunkMap.g();
@@ -1019,7 +1023,7 @@ public class ChunkProviderServer extends IChunkProvider {
 
         @Override
         protected void executeTask(Runnable runnable) {
-            ChunkProviderServer.this.world.getMethodProfiler().c("runTask");
+            // ChunkProviderServer.this.world.getMethodProfiler().c("runTask"); // Akarin - remove caller
             super.executeTask(runnable);
         }
 
