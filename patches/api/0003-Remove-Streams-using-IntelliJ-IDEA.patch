From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: =?UTF-8?q?=E3=84=97=E3=84=A0=CB=8B=20=E3=84=91=E3=84=A7=CB=8A?=
 <tsao-chi@the-lingo.org>
Date: Fri, 19 Jun 2020 19:55:56 +0800
Subject: [PATCH] Remove Streams using IntelliJ IDEA


diff --git a/src/main/java/co/aikar/timings/TimingsReportListener.java b/src/main/java/co/aikar/timings/TimingsReportListener.java
index bf3e059fe06aae361b2ded451914ed19b5e970c5..8c49d67e2656dcac0758c0908897736b49435bf8 100644
--- a/src/main/java/co/aikar/timings/TimingsReportListener.java
+++ b/src/main/java/co/aikar/timings/TimingsReportListener.java
@@ -58,7 +58,9 @@ public class TimingsReportListener implements MessageCommandSender {
 
     @Override
     public void sendMessage(@NotNull String message) {
-        senders.forEach((sender) -> sender.sendMessage(message));
+        for (CommandSender sender : senders) {
+            sender.sendMessage(message);
+        }
     }
 
     public void addConsoleIfNeeded() {
diff --git a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
index c91ea2a0679a7f3a5627b5a008e0b39df3332889..53c36e30e8f500c9bf58e6b12585d44cc5c9e9e2 100644
--- a/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
+++ b/src/main/java/com/destroystokyo/paper/MaterialSetTag.java
@@ -14,7 +14,9 @@ import org.bukkit.block.BlockState;
 import org.bukkit.block.data.BlockData;
 import org.bukkit.inventory.ItemStack;
 
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
 import java.util.Set;
 import java.util.function.Predicate;
 import java.util.stream.Collectors;
@@ -115,7 +117,16 @@ public class MaterialSetTag implements Tag<Material> {
     }
     @NotNull
     public MaterialSetTag add(@NotNull Predicate<Material> filter) {
-        add(Stream.of(Material.values()).filter(((Predicate<Material>) Material::isLegacy).negate()).filter(filter).collect(Collectors.toList()));
+        List<Material> list = new ArrayList<>();
+        Predicate<Material> predicate = ((Predicate<Material>) Material::isLegacy).negate();
+        for (Material material : Material.values()) {
+            if (predicate.test(material)) {
+                if (filter.test(material)) {
+                    list.add(material);
+                }
+            }
+        }
+        add(list);
         return this;
     }
 
@@ -139,7 +150,16 @@ public class MaterialSetTag implements Tag<Material> {
 
     @NotNull
     public MaterialSetTag not(@NotNull Predicate<Material> filter) {
-        not(Stream.of(Material.values()).filter(((Predicate<Material>) Material::isLegacy).negate()).filter(filter).collect(Collectors.toList()));
+        List<Material> list = new ArrayList<>();
+        Predicate<Material> predicate = ((Predicate<Material>) Material::isLegacy).negate();
+        for (Material material : Material.values()) {
+            if (predicate.test(material)) {
+                if (filter.test(material)) {
+                    list.add(material);
+                }
+            }
+        }
+        not(list);
         return this;
     }
 
@@ -181,7 +201,13 @@ public class MaterialSetTag implements Tag<Material> {
 
     @NotNull
     public MaterialSetTag ensureSize(@NotNull String label, int size) {
-        long actual = this.materials.stream().filter(((Predicate<Material>) Material::isLegacy).negate()).count();
+        long actual = 0L;
+        Predicate<Material> predicate = ((Predicate<Material>) Material::isLegacy).negate();
+        for (Material material : this.materials) {
+            if (predicate.test(material)) {
+                actual++;
+            }
+        }
         if (size != actual) {
             throw new IllegalStateException(label + " - Expected " + size + " materials, got " + actual);
         }
